package ru.bjcreslin.naidizakupku.telegram.events.handlers.impl

import org.springframework.cache.annotation.CacheEvict
import org.springframework.cache.annotation.Cacheable
import org.springframework.stereotype.Service
import ru.bjcreslin.naidizakupku.procurement.service.ProcurementService
import ru.bjcreslin.naidizakupku.telegram.events.handlers.CommandHandler
import ru.bjcreslin.naidizakupku.telegram.state.entity.SectionState
import ru.bjcreslin.naidizakupku.telegramUser.TelegramUserService

@Service("root#stats")
class StatsBotService(
    private val telegramUserService: TelegramUserService,
    private val procurementService: ProcurementService
) : CommandHandler {

    @Cacheable(cacheNames = ["statsCache"], key = "#chatId")
    override fun execute(chatId: Long, params: String): String {
        val user = telegramUserService.getNewOrSavedUserByTelegramId(chatId)
        val procurements = procurementService.getAllProcurementsForTelegram(user)
        
        return buildStatsMessage(procurements)
    }

    override fun getSupportedState(): SectionState {
        return SectionState.ROOT
    }

    private fun buildStatsMessage(procurements: List<ru.bjcreslin.naidizakupku.procurement.entity.Procurement>): String {
        val totalProcurements = procurements.size
        
        if (totalProcurements == 0) {
            return """
                üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞*
                
                –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∑–∞–∫—É–ø–æ–∫.
                –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±—Ä–∞—É–∑–µ—Ä–Ω–æ–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫—É–ø–æ–∫!
            """.trimIndent()
        }

        val totalPrice = procurements.sumOf { 
            it.price?.toLong() ?: 0L 
        }
        
        val avgPrice = if (totalProcurements > 0) totalPrice / totalProcurements else 0L
        
        val topPublishers = procurements
            .groupBy { it.publisher }
            .mapValues { it.value.size }
            .toList()
            .sortedByDescending { it.second }
            .take(3)

        return """
            üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∑–∞–∫—É–ø–∫–∞–º*
            
            üìà *–û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:*
            ‚Ä¢ –í—Å–µ–≥–æ –∑–∞–∫—É–ø–æ–∫: $totalProcurements
            ‚Ä¢ –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ${formatPrice(totalPrice.toString())}
            ‚Ä¢ –°—Ä–µ–¥–Ω—è—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ${formatPrice(avgPrice.toString())}
            
            üèõÔ∏è *–¢–æ–ø –∑–∞–∫–∞–∑—á–∏–∫–æ–≤:*
            ${topPublishers.joinToString("\n") { "‚Ä¢ ${it.first ?: "–ù–µ —É–∫–∞–∑–∞–Ω"}: ${it.second} –∑–∞–∫—É–ø–æ–∫" }}
            
            üí° *–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:*
            ‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /list –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –∑–∞–∫—É–ø–æ–∫
            ‚Ä¢ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –∑–∞–∫—É–ø–∫–∏ —Å –ø–æ–º–æ—â—å—é AI (/gigachat)
        """.trimIndent()
    }

    private fun formatPrice(price: String): String {
        return if (price.isNotBlank() && price != "0") {
            "${price.toLongOrNull()?.let { "%,d".format(it) } ?: price} ‚ÇΩ"
        } else {
            "–ù–µ —É–∫–∞–∑–∞–Ω–∞"
        }
    }

    @CacheEvict(cacheNames = ["statsCache"], key = "#chatId")
    fun invalidateUserStats(chatId: Long) {
        // –ú–µ—Ç–æ–¥ –¥–ª—è –∏–Ω–≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫—ç—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    }
}
