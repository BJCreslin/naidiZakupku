spring.application.name=naidiZakupku
server.port=9000
logging.level.root=info
logging.level.com.example.demo=debug
logging.file.name=logs/spring-boot-application.log
logging.pattern.console=%d{yyyy-MM-dd HH:mm:ss} - %msg%n
logging.pattern.file=%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n

logging.level.org.springframework.security=DEBUG
logging.level.org.springframework.web=DEBUG

logging.level.org.postgresql=DEBUG
logging.level.com.zaxxer.hikari=DEBUG
logging.level.liquibase=DEBUG

# HikariCP настройки для стабильности
spring.datasource.hikari.connection-timeout=30000
spring.datasource.hikari.validation-timeout=5000
spring.datasource.hikari.leak-detection-threshold=60000
spring.datasource.hikari.maximum-pool-size=10
spring.datasource.hikari.minimum-idle=5
spring.datasource.hikari.idle-timeout=300000
spring.datasource.hikari.max-lifetime=1200000
spring.datasource.hikari.auto-commit=false
spring.datasource.hikari.pool-name=NaidiZakupkuHikariCP

# Graceful shutdown настройки
server.shutdown=graceful
spring.lifecycle.timeout-per-shutdown-phase=30s

jwt.token.secret=${NAIDI_ZAKUPKU_JWT_SECRET_CODE:dvhb2934yasdfsdfios98xhfbye789as}
jwt.token.expired = ${NAIDI_ZAKUPKU_JWT_TOKEN_EXPIRED:1800000}
jwt.token.header = Authorization
jwt.token.bearerPrefix = Bearer

# PostgreSQL на хосте из Docker контейнера
spring.datasource.url=jdbc:postgresql://host.docker.internal:5432/zakupdb
spring.datasource.username=${NAIDI_ZAKUPKU_USER_DB:bduser}
spring.datasource.password=${NAIDI_ZAKUPKU_PASSWORD_DB:bdPassword}
spring.datasource.driver-class-name=org.postgresql.Driver
spring.jpa.hibernate.ddl-auto=validate
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.hibernate.naming.physical-strategy=org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl
spring.jpa.open-in-view=false
spring.liquibase.change-log=classpath:db/changelog/db.changelog-master.xml
spring.liquibase.enabled=true

# JPA настройки для стабильности
spring.jpa.properties.hibernate.connection.provider_disables_autocommit=true
spring.jpa.properties.hibernate.jdbc.batch_size=20
spring.jpa.properties.hibernate.order_inserts=true
spring.jpa.properties.hibernate.order_updates=true
spring.jpa.properties.hibernate.connection.autocommit=false

users.defaultRole=User
users.telegram-user-name-prefix=TelegramUser

telergram.name = ${NAIDI_ZAKUPKU_TELEGRAM_BOT_NAME:mHelperTestTgBot}
telergram.token=${NAIDI_ZAKUPKU_TELEGRAM_BOT_TOKEN}

code.minimum=100000
code.maximum=999999
code.maxAttemptMinutes=3

spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true
spring.jpa.properties.hibernate.use_sql_comments=true

gigachat.auth.url=https://ngw.devices.sberbank.ru:9443/api/v2/oauth
gigachat.api.url=https://gigachat.devices.sberbank.ru/api/v1
gigachat.auth.client-id = ${GIGACHAT_AUTH_ID}
gigachat.auth.client-secret = ${GIGACHAT_AUTH_CLIENT_SECRET}

spring.mvc.trailing-slash.match=true

rate-limit.max-requests=10
rate-limit.period-minutes=1

# ===== МОНИТОРИНГ И МЕТРИКИ =====

# Actuator endpoints
management.endpoints.web.exposure.include=health,info,metrics,prometheus,caches,env,configprops
management.endpoint.health.show-details=always
management.endpoint.health.show-components=always

# Prometheus метрики
management.prometheus.metrics.export.enabled=true
management.prometheus.metrics.export.step=1m
management.prometheus.metrics.export.descriptions=true

# Cache monitoring settings
management.endpoint.caches.enabled=true
management.metrics.cache.instrument=true
logging.level.org.springframework.cache=INFO

# HTTP метрики
management.metrics.web.server.request.autotime.enabled=true
management.metrics.web.server.request.autotime.percentiles=0.5,0.95,0.99
management.metrics.web.server.request.autotime.percentiles-histogram=true

# JVM метрики
management.metrics.jvm.enabled=true
management.metrics.process.enabled=true
management.metrics.system.enabled=true

# Database метрики
management.metrics.jdbc.instrument=true
management.metrics.hikaricp.enabled=true

# Custom метрики
management.metrics.tags.application=${spring.application.name}
management.metrics.tags.environment=production

# Логирование метрик
logging.level.io.micrometer=INFO
logging.level.org.springframework.boot.actuator=INFO

# Метрики производительности
management.metrics.distribution.percentiles-histogram.http.server.requests=true
management.metrics.distribution.percentiles-histogram.cache.gets=true
management.metrics.distribution.percentiles-histogram.cache.puts=true

# Настройки для мониторинга кэшей
management.metrics.cache.monitoring.enabled=true
